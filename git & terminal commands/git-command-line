Top 10 Git Commands:

1. git clone- This command is for downloading existing source code from a remote repo. It is to make an identical copy of the latest version of a project in a repo and save in a computer. 
: git clone <name-of-the-repository-link>
2. git branch- This command allows several developers to be able to work in parallel on the same project simultaneously.
: git branch <branch-name>
    * The git command for viewing branches: git branch --list
    * The git command for deleting branche: git branch -d <branch-name>
3. git checkout- This command is used to switch from a branch to another branch. 
: git checkout <name-of-a-branch>
4. git status- This command is used to see all the necessary info about the current branch.
: git status. 
5. git add- This command is to add changes into the next commit. 
: git add <file-name>
    * To add all the changes at once: git add .
6. git commit- This command is used to save the changes and updates a developer has made. 
: git commit -m "commit-message"
7. git push- This command is to upload the commits to the remote repo once the changes are commited. 
: git push <remote> <branch-name>
    * For a newly created branch- git push --set-upstream <remote> <name-of-your-branch>
8. git pull- This command is used to get updates from the remote repo. 
: git pull <remote>
9. git revert- This command is used to undo the changes that were made. 
: git revert <commit-hash-code>
10. git merge- This command is used to merge the branch that is completed in development. 
    * First switch to the <dev> branch- git checkout dev
    * Update the local dev branch- git fetch 
    * Merge the feature branch into dev: git merge <branch-name> 

---------------------------------------------------------------------------------------------------------------------------

A Written Convention:
i.  Highly depends on teams and projects.


Integrating Changes & Structuring Releases: 
i.  Mainline Development- "Always Be Integrating"
-   single branch where everyone commits their work.
-   very few branches. 
-   commits are relatively small due to constant integration model. 
-   must have high quality testing and QA standard is top notch. 

ii. State, Release, and Feature Branches
-   different types of branches. 
-   fulfill different types of jobs. 

Long-Running Branches- Main or Master Branch | Develop Branch so on. 
- exist through the complete lifetime of the project. 
- no direct commits, it should be done through merge or rebase to make sure the code is reviewed and test. 

Short-Lived Branches: Feature branch
- usually done for new features, bug fixes, refactorings, experiments. 
- will be deleted after integrations- merge. (merge/rebase)

Note: Branching Strategies depends on "Team | Projects" etc. 


Pull Requests
- invites reviewers to provide feedback before merging.
- contribute code to other repositories where one doesn't have access to merge such as open source project.

Merge Conflicts
- occurs when a version of a file has been submitted that is newer than the version of the file you have stated to base your changes on. 
- easiest way to resolve a conflicted file is to open it and make any necessary changes.
---------------------------------------------------------------------------------------------------------------------------
"master" branch name is migrated to "main" branch as a default.

Git Command Listing- Part 1
    a. git version 
    b. git config --global user.name "Tony Start"
    c. ls 
    d. cd github-demo 
    e. echo 
    f. cat start.txt 
    g. git add start.txt 
    h. git status 
    i. git commit -m "added start.txt file" 
    j. git push origin master 
    k. git config --global init.defaultBranch main 
    l. git config --global --list 
    m. cls
    n. rmdir /s .git
    o. rmdir -rf .git
    p. git clone link. 

Git Command Listing- Part 3
    a. git branch -m main - to change the branch to main 
    
